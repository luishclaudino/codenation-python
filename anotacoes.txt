Codenation: Start-up nascida em 2017 com a missão de tornar a educação na área de tecnologia financeiramente viável
e acessível à todos os lugares direcionado às necessidades do mercado. Conectando estudantes e profissionais em
transição de carreira à empresas na busca de novos talentos.

AceleraDev: Programa de ensino de tecnologia específica, Front-end, backend, mobile, Data science, python de duração de 10 semanas
programas com formato prensencial ou online. Possui empresas apoiadoras que dão bolsas de estudo.
Programa funciona com base no challenge based learning onde cada semana as pessoas realizam um desafio técnico
e um projeto prático que é apresentada à empresa apoiadora do programa.

Vídeo com explicação da plataforma

Possui quizes ou projetos para avaliar suas habilidades no final da semana.

Possui um aplicativo CLI para correção

Ementa:
- Módulo 01: Fundamentos da Linguagem
Fundamentos básicos como estruturas de dados, repetição, decisão, formatação de strings e padronização usando PEP8 para tornar o código legível
    Tópico 1
    - Tipos Primitivos
    - Tipos Built-in
    - Estruturas de decisão
    - Estruturas de repetição
    - formatação de string
    Tópico 2
    - Como escrever código Python usando PEP8

    - Links importantes:
    - Documentação do Python: https://www.python.org/doc/
    - Visualizador de Execução: http://pythontutor.com/visualize.html#mode=edit
    - Timestamp: https://www.epochconverter.com/
    - Strings: https://realpython.com/python-strings/
    - Dicas de Python intermediário: https://book.pythontips.com/en/latest/
    - Escrever em PEP8: https://realpython.com/python-pep8/
    - Ambientes virtuais de Python: https://pythonacademy.com.br/blog/python-e-virtualenv-como-programar-em-ambientes-virtuais

- Módulo 02: Funções e Classes
Falar sobre orientação à objetos (herança, composição, polimorfismo, adição de métodos nas classes)
    Tópico 1: Funções e Classes
	- Herança
	- Composição
	- Polimorfismo
	- Métodos de Classe
	- Métodos de instância
	- Métodos Estáticos

    Links importantes:
    - Programação orientada ao objeto em Python: Como fazer composição em python: https://professormarcolan.com.br/programacao-orientada-ao-objeto-em-python-recurso-do-composicao/
    - Objetos Pythonicos: http://turing.com.br/material/oopy/oopy-t4a2.pdf
    - POO com Python 3: https://sites.google.com/site/rafaeluft/poo-com-python
    - Python Object Oriented Programming: https://www.programiz.com/python-programming/object-oriented-programming
    - Object-Oriented Programming (OOP) in Python 3: https://realpython.com/python3-object-oriented-programming/

- Módulo 03: Testes com Python
Realização de testes unitários e outros níveis de teste e usar o pytest praticando o TDD
    Tópico 1: Testes com Python
    - Tipos de testes
        - Sistema: Testes de aceitação que testa o sistema como um todo e é mais caro e demorado
        - Integração: Testa a integração entre as diversas partes do sistema como classes complexas e módulos.
        - Unitário: Testa estruturas básicas do sistema como função e classes mais simples, é mais barato e rápido de se fazer.
    - Porque usar TDD?
        - Desenvolvimento orientado a testes.
        - É uma maneira de desenvolver pensando em testes.
        - Guia o design da aplicação.
        - Nos ajuda a entender melhor o problema que estamos resolvendo.
        - Garante uma boa qualidade na aplicação dando segurança para alterá-la.
        - Ciclo de desenvolvimento usando TDD:
            - Escreva um teste.
            - Implementa o mínimo para que o teste passe.
            - Refatore.
            - Repita.
    - Pytest

    Links importantes:
    - In Tests We Trust — TDD with Python: https://code.likeagirl.io/in-tests-we-trust-tdd-with-python-af69f47e6932
    - Unit Testing & Test-Driven Development: https://python-3-patterns-idioms-test.readthedocs.io/en/latest/UnitTesting.html
    - Obey the Testing Goat! TDD for the Web, with Python, Selenium, Django, JavaScript and pals: https://www.obeythetestinggoat.com/pages/book.html
    - Test Driven Development with Pytest: https://afroshok.com/articles/test-driven-development-pytest/
    - Part III – Create a Home Page with TDD, Staticfiles and Templates settings: http://www.marinamele.com/taskbuster-django-tutorial/create-home-page-with-tdd-staticfiles-templates-settings
    - Test Driven Development with Django: https://medium.com/the-andela-way/test-driven-development-with-django-ccb179171dcd
    - A simple introduction to Test Driven Development with Python: https://www.freecodecamp.org/news/learning-to-test-with-python-997ace2d8abe/

- Módulo 04: Backend com Python
Protocolos de Comunicação HTTP TCP, conceitos básicos de arquiteturas distribuídas, segurança de API's e sistemas web
    Tópico 1: Backend com Python
    - Protocolos de comunicação (HTTP, TCP, UDP, Socket)
    - Conceitos de arquitetura distribuída
    - Conceitos segurança de APIs:
        - Autenticação
        - Tokens
        - Sessões

    Links importantes:
    - Um pouco do protocolo HTTP - https://www.vivaolinux.com.br/artigo/Um-pouco-do-protocolo-HTTP?pagina=1
    - Introduction to Distributed System Design - http://www.hpcs.cs.tsukuba.ac.jp/~tatebe/lecture/h23/dsys/dsd-tutorial.html
    - Web API Security - https://www.imperva.com/learn/application-security/web-api-security/
    - REST Security Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html
    - Tutorial Django Parte 7: Sessões - https://developer.mozilla.org/pt-BR/docs/Learn/Server-side/Django/Sess%C3%B5es
    - Suporte a serviços diferenciados em servidores web: modelos e algoritmos - http://www.deinf.ufma.br/~mario/producao/tese_swds.pdf
    - Cross site scripting (XSS) attacks - https://www.imperva.com/learn/application-security/cross-site-scripting-xss-attacks/
    - How to Adjust TCP Window Size to Improve Network Performance - https://www.auvik.com/franklymsp/blog/tcp-window-size/

- Módulo 05: Django
Detalhes sobre o Django e como configurar URLS, views, validações
	Tópico 1: Django
	- Models
	- Urls
	- Views
	- Settings
	- Validações
	- Middlewares

	Anotações:
	- Comando que inicializa o projeto django com nome ecomm na pasta atual: django-admin startproject ecomm .
	- Executa as migrations: python manage.py makemigrations
	- acessa aqui: http://127.0.0.1:8000/products/list
	- Middlewares são interessantes para ver se um usuario é valido, iniciar uma sessão no cache, registrar o que o usuário está fazendo na
	aplicação, barrar o usuário se algo não estiver certo por exemplo utilizar um token nos cabeçalhos de requisição. Realizar tratamento
	de erros
	- Comando para criar o usuário admin: python3 manage.py createsuperuser

	Links importantes:
	- Documentação oficial: https://www.djangoproject.com/
	- Videos da conferencia de python: https://pyvideo.org/
	- Django: o framework web para perfeccionistas com prazos: https://www.infoq.com/br/presentations/django-framework-web-prazos/
    - Aula 5 - Entendendo um projeto Django: https://www.youtube.com/watch?v=LndJOSwRYOM
    - Entendendo o Django: https://www.profissionaisti.com.br/2009/04/entendendo-o-django/
    - Django Tutorial Parte 2: Criando o "esqueleto" de um site: https://developer.mozilla.org/pt-BR/docs/Learn/Server-side/Django/skeleton_website
    - Introdução ao Django — Começando um projeto do zero: https://medium.com/@thais.ribeiro/introdu%C3%A7%C3%A3o-ao-django-come%C3%A7ando-um-projeto-do-zero-57a953e0614b

	Dica do Luis Guerreiro
	Como definir uma custom model para fazer o intermediário entre duas models em uma relação m2m > https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.ManyToManyField.through

	Vi alguns CR onde criaram uma função para validar a escolha do level, porém o django já fornece uma maneira mais simples de resolver, utilizando um argumento "choices" > https://docs.djangoproject.com/en/3.0/ref/models/fields/#choices

	É uma boa prática no django utilizar o nome da model para definir a relação, ao invés do objeto, dessa forma é possível criar uma relação com uma model ainda não definida, ou seja, evita imports ciclicos >> https://docs.djangoproject.com/en/3.0/ref/models/fields/#foreignkey

	https://www.it-swarm.dev/pt/python/importacoes-circulares-ou-ciclicas-em-python/957902329/

	https://stackabuse.com/python-circular-imports/


- Módulo 06: Django REST Framework
Para Criação da API de forma muito simples
	Tópico 1: Django REST Framework
	- Conhecendo o Projeto
	- Serialization
	- Requests e Responses
	- Class based Views
	- Authentication e Premissions
	- Viewset e routes

	Links importantes:
	- How to write an API in 3 lines of code with Django REST framework: https://medium.com/crowdbotics/how-to-write-an-api-in-3-lines-of-code-with-django-rest-framework-59b0971edfa4
	- Let’s build an API with Django REST Framework: https://medium.com/backticks-tildes/lets-build-an-api-with-django-rest-framework-32fcf40231e5
	- O que é API? REST e RESTful? Conheça as definições e diferenças!: https://becode.com.br/o-que-e-api-rest-e-restful/
	- Learn REST: A RESTful Tutorial: https://www.restapitutorial.com/

- Módulo 07: Persistência e Cache
Trabalhar com a ORM do Django e cachear dados para melhorar o desempenho
	- Uso Correto do ORM do Django
	- Quando usar ORM ou Raw SQL
	- Cache

	Anotações:
	- Product.objects.filter(name='Uno') => Procura produtos que tenham o nome exatamente igual a Uno.
	- Product.objects.filter(name__contains='Uno') => Procura produtos que contenha Uno no nome mas não exato. Não é case sensitive ou seja se o U for minusculo ele vai continuar encontrando.
	- Product.objects.filter(price__gte=100) => Retorna todos os produtos que tenham preço maior ou igual a 100
	- Product.objects.get() => só retorna um item
	- Product.objects.raw('select * from products_product') => tem que incluir o id para fazer uma iteração / é mais rápida que utilizando o ORM por ser mais otimizado.
	- Usar o cursor para fazer querys:
	from django.db import connection:
	with connection.cursor() as cursor:
		cursor.execute('insert into products_product (name, price, description, category_id) values ("produto cursor",10.99,"product description",1)')
		cursor.execute('select * from products_product')
	Isso retorna em formato de tuplas tendo um controle maior do que o raw.
	- Cache da query do banco de dados: Instalar o django redis.

	Links Recomendados:
	- Django Models: O Guia “Definitivo” das Boas Práticas: https://moacirmoda.com/django-models-o-guia-definitivo-das-boas-praticas/
	- Django ORM Optimization Tips: http://concisecoder.io/2018/11/04/django-orm-optimization-tips/
    	- Django ORM Relationships Cheat Sheet: https://hackernoon.com/django-orm-relationships-cheat-sheet-14433d6cf68c
	- Django ORM Cookbook Documentation: https://buildmedia.readthedocs.org/media/pdf/django-orm-cookbook/latest/django-orm-cookbook.pdf
    	- Como funciona o ORM do Django: https://www.gilenofilho.com.br/como-funciona-o-orm-do-django/
	- Visualizando query SQL a partir do ORM Django: https://medium.com/@beatrizuezu/visualizando-query-sql-a-partir-do-orm-django-5771370a9c55
	- Caching in Django With Redis: https://realpython.com/caching-in-django-with-redis/


- Módulo 08: Qualidade
Documentação usando Swagger e Sfinx (multiplos propósitos)
    Anotações:
    - Explicar de forma geral o que as funções fazem sem muitos detalhes.
    - Utilizar as três aspas """ em baixo da definição
    - Colocar no inicio do arquivo para fazer uma documentação do módulo
    - def with_text(self, text: str) -> QuerySet:
        text: str indica que o input é do tipo string
        -> QuerySet indica que o retorno é um queryset
    - Swagger: escreve a documentação em yaml com uma API Interativa, mostra todos os endpoint que a aplicação possui
    - Sphinx:
        Instalar: pip install sphinx
        sphinx-quickstart FOLDERNAME -p NOMEDOPROJETO
        Não quero separar os diretorios
        Autor
        Release
        Deixar uma lingua que você queira
        cd docs
        make html -> compilar o projeto em html
    - Ramilificando as suas APIs: https://klauslaube.com.br/2017/01/31/ramilificando-as-suas-apis.html
    - Swagger: Como gerar uma documentação interativa para API REST: http://www.matera.com/blog/post/swagger-como-gerar-uma-documentacao-interativa-para-api-rest
    - Introdução ao RAML - https://medium.com/renato-de-oliveira/introdu%C3%A7%C3%A3o-ao-raml-ac47d2fd5e22
    - Documentação simples e sofisticada com Sphinx - https://www.ibm.com/developerworks/br/library/os-sphinx-documentation/index.html
    - API Designer: https://github.com/mulesoft/api-designer
    - Design your API: https://raml.org/developers/design-your-api

- Módulo 09: Deploy
Como fazer o deploy de tudo que estudamos, como fazer um deploy em uma solução de cloud e como fazer Integração contínua
assim quando fizermos um commit -> iremos buildar e enviar para produção sem precisar de intervenção humana.


- Módulo 10: Projeto Final e Apresentação
